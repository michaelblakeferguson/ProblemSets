/////////////////////////////////////////////////////////////////////
// Euler44 ~ Pentagon numbers
// 
// Problem Statement:
// 
// Pentagonal numbers are generated by the formula, P(n)=n(3n−1)/2.
// The first ten pentagonal numbers are:
// 
//		1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// 
// It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However,
// their difference, 70 − 22 = 48, is not pentagonal.
// 
// Find the pair of pentagonal numbers, Pj and Pk, for which their
// sum and difference are pentagonal and D = |Pk − Pj| is minimised;
// what is the value of D?
// 
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
// Algorithm Explanation:
// 
// List of pentagonal numbers are created at start for reference
// during the main loop. For loops pick two values to test for
// pentagonality and then checks the sum and diff. If it passes we
// set solution to the difference.
// 
/////////////////////////////////////////////////////////////////////

#include <iostream>
#include <algorithm>
#include <chrono>

using namespace std;

int main()
{
	auto start = std::chrono::high_resolution_clock::now();
	int solution = 0;

	int pentas[2500];
	for (int i = 0; i < 2500; i++)
	{
		pentas[i] = i * (3 * i - 1) / 2;
	}

	int sum, diff;
	for (int i = 1; i < 2500; i++)
	{
		for (int j = i+1; j < 2500; j++)
		{
			sum = pentas[i] + pentas[j];
			diff = abs(pentas[i] - pentas[j]);
			if ((find(begin(pentas), end(pentas), sum) != end(pentas)) && (find(begin(pentas), end(pentas), diff) != end(pentas)))
			{
				solution = diff;
				break;
			}
		}
	}

	auto done = std::chrono::high_resolution_clock::now();
	cout << "Solution: " << solution << endl << endl;
	cout << "Program completed in " << std::chrono::duration_cast<std::chrono::milliseconds>(done - start).count() << " milliseconds." << endl;
}
