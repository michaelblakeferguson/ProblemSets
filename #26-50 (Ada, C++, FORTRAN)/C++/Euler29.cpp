/////////////////////////////////////////////////////////////////////
// Euler29 ~ Distinct powers
// 
// Problem Statement:
// 
// Consider all integer combinations of a^b for 2 <= a <= 5 and
// 2 <= b <= 5:
// 
//      2^2 = 4,  2^3 = 8,    2^4 = 16,  2^5 = 32
//      3^2 = 9,  3^3 = 27,   3^4 = 81,  3^5 = 243
//      4^2 = 16  4^3 = 64,   4^4 = 256, 4^5 = 1024
//      5^2 = 25, 5^3 = 125,  5^4 = 625, 5^5 = 3125
// 
// If they are then placed in numerical order, with any repeats
// removed, we get the following sequence of 15 distinct terms:
// 
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
// 
// How many distinct terms are in the sequence generated by
// a^b for 2 <= a <= 100 and 2 <= b <= 100?
//
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
// Algorithm Explanation:
// 
// GMP library is used to calculate large values of the exponents
// before converting to strings for comparison and storage.
//
/////////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <chrono>
#include "gmp.h"

using namespace std;

int main()
{
	auto start = std::chrono::high_resolution_clock::now();
	
	int solution = 0;
	bool found = false;
	
	mpz_t rop;
	mpz_init(rop);
	
	char * num;
	vector<string> numbers;
	
	for(int a = 2; a <= 100; a++)
	{
		for(int b = 2; b <= 100; b++)
		{
			mpz_ui_pow_ui(rop, a, b);
			num = mpz_get_str(num,10,rop);
			for(int i = 0; i < numbers.size(); i++)
			{
				if(numbers.at(i) == num)
				{
					found = true;
					break;
				}
			}
			if(found == false)
			{
				numbers.push_back(num);
				solution++;
			}
			found = false;
		}
	}
	
	auto done = std::chrono::high_resolution_clock::now();
    cout << "Solution: " << solution << endl << endl;
    cout << "Program completed in " << std::chrono::duration_cast<std::chrono::milliseconds>(done - start).count() << " milliseconds." << endl;
}
