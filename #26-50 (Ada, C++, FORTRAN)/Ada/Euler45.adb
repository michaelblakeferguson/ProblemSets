---------------------------------------------------------------------
-- Euler45 ~ Triangular, pentagonal, and hexagonal
-- 
-- Problem Statement:
-- 
-- Triangle, pentagonal, and hexagonal numbers are generated by the
-- following formulae:
-- 
--      Triangle        T(n) = n(n+1)/2       1, 3,  6, 10, 15, ...
--      Pentagonal      P(n) = n(3n-1)/2      1, 5, 12, 22, 35, ...
--      Hexagonal       H(n) = n(2n-1)        1, 6, 15, 28, 45, ...
--
-- It can be verified that T(285) = P(165) = H(143) = 40755.
-- 
-- Find the next triangle number that is also pentagonal and
-- hexagonal.
--
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Algorithm Explanation:
-- 
-- All hexagonal numbers are triangular numbers, so checking for
-- triangular numbers can be ignored. Hexagonal numbers are generated
-- according to the corresponding equation and then checked to see
-- if the value is also a pentagonal number.
--
---------------------------------------------------------------------
with Ada.Text_IO;   use  Ada.Text_IO;
with Ada.Real_Time; use  Ada.Real_Time;

procedure Euler45 is
   package Time_IO is new Fixed_IO(Duration);
   start_time, end_time : Ada.Real_Time.Time;
   elapsed_seconds : Ada.Real_Time.Time_Span;
   solution : integer := 0;
   
   function isPentagonal (p : Integer) return Boolean
   is
      Pn : Long_Long_Integer := 0;
      n : Long_Long_Integer := 1;
   begin
      
      while (Pn < Long_Long_Integer(p)) loop
         Pn := n * (3*n - 1)/2;
         if (Pn = Long_Long_Integer(p)) then
            return TRUE;
         end if;
         n := n + 1;
      end loop;
      return FALSE;
   end isPentagonal;

   Hn : integer;

begin
   start_time := Ada.Real_Time.Clock;

   for i in 144..30000 loop
      Hn := i * (2 * i - 1);
      if (isPentagonal(Hn)) then
         solution := Hn;
         EXIT;
      end if;
   end loop;

   end_time := Ada.Real_Time.Clock;
   elapsed_seconds := end_time - start_time;
   Put("Solution: " & solution'Image); New_Line; New_Line;
   Put("Program completed in ");
   Time_IO.Put(To_Duration(elapsed_seconds), Fore => 0, Aft => 3);
   Put(" seconds");
end Euler45;
