---------------------------------------------------------------------
-- Euler44 ~ Pentagon numbers
-- 
-- Problem Statement:
-- 
-- Pentagonal numbers are generated by the formula, P(n)=n(3n-1)/2.
-- The first ten pentagonal numbers are:
-- 
--		1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
-- 
-- It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However,
-- their difference, 70 - 22 = 48, is not pentagonal.
-- 
-- Find the pair of pentagonal numbers, Pj and Pk, for which their
-- sum and difference are pentagonal and D = |Pk - Pj| is minimised;
-- what is the value of D?
--
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Algorithm Explanation:
-- 
-- List of pentagonal numbers are created at start for reference
-- during the main loop. For loops pick two values to test for
-- pentagonality and then checks the sum and diff. If it passes we
-- set solution to the difference.
--
---------------------------------------------------------------------
with Ada.Text_IO;   use  Ada.Text_IO;
with Ada.Real_Time; use  Ada.Real_Time;

procedure Euler44 is
   package Time_IO is new Fixed_IO(Duration);
   start_time, end_time : Ada.Real_Time.Time;
   elapsed_seconds : Ada.Real_Time.Time_Span;
   solution : integer := 0;
   
   pentas : array (0 .. 2499) of integer;
   
   i, j, r, g, sum, diff : integer;
   
begin
   start_time := Ada.Real_Time.Clock;
   
   i := 0;
   while i < 2500 loop
      pentas(i) := i * (3 * i - 1) / 2;
      i := i + 1;
   end loop;
   
   for i in 1..2500 loop
      j := i + 1;
      while j < 2500 loop
         sum := pentas(i) + pentas(j);
         diff := abs(pentas(i) - pentas(j));
         
         for r in pentas'Range loop
            if pentas(r) = diff then
               for g in pentas'Range loop
                  if pentas(g) = sum then
                     solution := diff;
                     EXIT;
                  end if;
               end loop;
            end if;
         end loop;
         j := j + 1;
      end loop;
   end loop;
   
   end_time := Ada.Real_Time.Clock;
   elapsed_seconds := end_time - start_time;
   Put("Solution: " & solution'Image); New_Line; New_Line;
   Put("Program completed in ");
   Time_IO.Put(To_Duration(elapsed_seconds), Fore => 0, Aft => 3);
   Put(" seconds");
end Euler44;
